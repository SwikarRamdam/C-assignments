
Swikar Ramdam
PURBEI077045
// 1. WAP to find the length of a given string without using a library function.

#include <stdio.h>
int main(){
    char s[20];
    int i;
    gets(s);
    for (i= 0;s[i]!='\0';i++);
    printf("Length of %s is %d",s,i);
    return 0;
}
// 2. WAP to copy the content of a given string to another without using a library function.

#include <stdio.h>
int main(){
    char a[20],s[20];
    int i;
    gets(a);
    for (i= 0;a[i]!='\0';i++){
        s[i] = a[i];   
    }
    printf("%s",a);
    printf("\n%s",s);
    return 0;
}
// 3. WAP to reverse a given string without using a library function.

#include <stdio.h>
int main()
{
    char s[50], temp;
    int i, j;
    printf("Enter a string:\n");
    gets(s);
    i = 0;
    j = strlen(s) - 1;
    while (i < j)
    {
        temp = s[i];
        s[i] = s[j];
        s[j] = temp;
        i++;
        j--;
    }
    printf("The reverse string is :%s\n", s);
    return 0;
}
//4
#include <stdio.h>
int main()
{
   char str1[50], str2[50], i, j;
   printf("\nEnter first string: ");
   scanf("%s",str1);
   printf("\nEnter second string: ");
   scanf("%s",str2);

   for(i=0; str1[i]!='\0'; ++i); 
   for(j=0; str2[j]!='\0'; ++j, ++i)
   {
      str1[i]=str2[j];
   }

   str1[i]='\0';
   printf("\nOutput: %s",str1);
   
   return 0;
}
//5
#include<stdio.h>
 
int main() {
   char str1[30], str2[30];
   int i;
 
   printf("\nEnter two strings :");
   gets(str1);
   gets(str2);
 
   i = 0;
   while (str1[i] == str2[i] && str1[i] != '\0')
      i++;
   if (str1[i] > str2[i])
      printf("str1 > str2");
   else if (str1[i] < str2[i])
      printf("str1 < str2");
   else
      printf("str1 = str2");
 
   return (0);
}
// 6. WAP to convert all characters in a given string to uppercase.
#include <stdio.h>
int main()
{
   char s[20];
   int i;
   printf("Enter the string:\n");
   gets(s);
   for (i = 0; s[i] != '\0'; i++)
   {
      if (s[i] >= 'a' && s[i] <= 'z'){
         s[i] = s[i] - 32;}
   }
   printf("%s", s);
   return 0;
}
// 7. WAP to find the number of vowels, consonants, digits and white spaces in a given string.
#include <stdio.h>
int main (){
   char s[100];
   int i, vowels,consonants,digits,spaces;
   vowels = consonants =digits = spaces = 0;
   printf("Enter the string:\n");
   gets(s);
   for (i=0;s[i] !='\0';i++){
      if (s[i] == 'a' || s[i] == 'e' ||  s[i] == 'i' || 
         s[i] == 'o' ||  s[i] == 'u' ||  s[i] == 'A' ||  
         s[i] == 'E' ||  s[i] == 'I' ||  s[i] == 'O' ||  s[i] == 'U')
         vowels++;
      else if (s[i]>='a'&& s[i]<='z')
      consonants++;
      else if(s[i]>= '0' && s[i]<='9')
      digits++;
      else if(" ")
      spaces++;   
   }
   printf("Number of vowels = %d\n",vowels);
   printf("Number of consonants = %d\n",consonants);
   printf("Number of digits = %d\n",digits);
   printf("Number of spaces = %d\n",spaces);

   return 0;
}
// 8. WAP to count the number of words in a given line of text.
#include <stdio.h>
int main(){
   char s[100];
   int i,words = 0;
   printf("Enter the string:\n");
   gets(s);
   for (i=0;s[i]!='\0';i++){
   if(s[i] == ' ' && s[i+1] != ' ')
   words++;
   }
   printf("Number of words = %d\n",words+1);
   return 0;
}
// 9. WAP to check whether a given word is palindrome or not.
#include <stdio.h>
int main()
{
   char s[100], restring[100];
   int i, length, pal = 0;
   printf("Enter a string:\n");
   gets(s);
   for (i = 0; s[i] != '\0'; i++);
   length = i;
   for (i = length - 1; i >= 0; i--)
   {
      restring[length - i - 1] = s[i];
      pal = 1;
   }
   for (i = 0;i <= length; i++)
      if (restring[i] != s[i])
      pal = 0;
   if(pal == 1)
   printf("%s is a palindrome \n",s);

   if(pal == 0)
   printf("%s is not a palindrome \n",s);
   return 0;
}
//10
#include <stdio.h>
#include <string.h>

int main() {
   char str[5][50], temp[50];
   printf("Enter 5 words: ");

   for (int i = 0; i < 5; ++i) {
      fgets(str[i], sizeof(str[i]), stdin);
   }

   for (int i = 0; i < 5; ++i) {
      for (int j = i + 1; j < 5; ++j) {

       
         if (strcmp(str[i], str[j]) > 0) {
            strcpy(temp, str[i]);
            strcpy(str[i], str[j]);
            strcpy(str[j], temp);
         }
      }
   }

   printf("\nIn the lexicographical order: \n");
   for (int i = 0; i < 5; ++i) {
      fputs(str[i], stdout);
   }
   return 0;
}